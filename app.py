import pandas as pd
import streamlit as st
from io import BytesIO
import plotly.express as px
import plotly.graph_objects as go
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='app.log',
    format='%(asctime)s - %(message)s',
    level=logging.INFO
)

def log_action(action):
    user = st.session_state.get('user', 'unknown')
    logging.info(f"User: {user} - {action}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DAYS_IN_MONTH = 28
NORM_HOURS = 160
WORK_GROUPS = ['–ì–†1', '–ì–†2', '–ì–†3', '–ì–†4', '–æ—Ñ–∏—Å']
STATUS_COLORS = {
    '–æ—Ç–ø—É—Å–∫': '#90EE90',
    '–±/–ª': '#FFB6C1',
    '—É—á.–æ—Ç–ø—É—Å–∫': '#87CEEB',
    '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞': '#FFFACD'
}

# –®–∞–±–ª–æ–Ω—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
SCHEDULE_TEMPLATES = {
    '–ì—Ä–∞—Ñ–∏–∫1': [11.5, 11.5, "", 11.5, 11.5, "", "", "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫2': [11.5, 7.5, "", "", 11.5, 11.5, "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫3': ["", 11.5, 11.5, "", "", "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫4': ["", "", 11.5, 11.5, "", 11.5, 11.5],
    '–û—Ñ–∏—Å': [8, 8, 8, 8, 8]
}

class EmployeeSchedule:
    def __init__(self, name, group, schedule_type, exceptions=None, absences=None):
        self.name = name
        self.group = group
        self.schedule_type = schedule_type
        self.exceptions = exceptions or {}
        self.absences = absences or {}

    def generate_schedule(self):
        base_pattern = SCHEDULE_TEMPLATES[self.schedule_type]
        schedule = {}
        
        pattern_index = 0
        for day in range(1, DAYS_IN_MONTH+1):
            day_str = str(day)
            if day_str in self.exceptions:
                schedule[day_str] = self.exceptions[day_str]
            elif day_str in self.absences:
                schedule[day_str] = self.absences[day_str]
            else:
                schedule[day_str] = base_pattern[pattern_index % len(base_pattern)]
                pattern_index += 1
        
        total = sum(
            float(h) if isinstance(h, (int, float, str)) and str(h).replace('.', '').isdigit() 
            else 0 
            for h in schedule.values()
        )
        
        return {
            '–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã': self.name,
            '–ì–† ‚Ññ': self.group,
            **schedule,
            '–§–∞–∫—Ç –§–†–í': round(total, 1),
            '–æ—Ç –§–†–í': round(total - NORM_HOURS, 1),
            '–°—Ç–∞—Ç—É—Å': self.get_status()
        }

    def get_status(self):
        statuses = []
        for day in range(1, DAYS_IN_MONTH+1):
            val = self.absences.get(str(day), '')
            if val in STATUS_COLORS:
                statuses.append(val)
        return ', '.join(set(statuses)) if statuses else '–∞–∫—Ç–∏–≤–µ–Ω'

# –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
def style_cells(row):
    styles = []
    for day in range(1, DAYS_IN_MONTH+1):
        val = row[str(day)]
        style = ''
        for status, color in STATUS_COLORS.items():
            if val == status or (isinstance(val, (int, float)) and val > NORM_HOURS and status == '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞'):
                style = f'background-color: {color}; color: #000;'
                break
        styles.append(style)
    return styles

# –®–∞–±–ª–æ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def absence_template():
    if 'schedule_data' not in st.session_state:
        st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return
    
    try:
        employees_list = st.session_state.schedule_data['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'].tolist()
    except KeyError as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return

    types = {
        "–û–±—ã—á–Ω—ã–π –æ—Ç–ø—É—Å–∫": {'pattern': '–æ—Ç–ø—É—Å–∫', 'days': 14},
        "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π": {'pattern': '–±/–ª', 'days': 7},
        "–£—á–µ–±–Ω—ã–π –æ—Ç–ø—É—Å–∫": {'pattern': '—É—á.–æ—Ç–ø—É—Å–∫', 'days': 5}
    }
    
    with st.sidebar.expander("–®–∞–±–ª–æ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π"):
        selected = st.selectbox("–¢–∏–ø –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è", list(types.keys()))
        start_day = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å", 1, DAYS_IN_MONTH, key='start_day')
        employees = st.multiselect("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", employees_list)
        
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω"):
            days = types[selected]['days']
            pattern = types[selected]['pattern']
            
            for emp in employees:
                idx = st.session_state.schedule_data[
                    st.session_state.schedule_data['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'] == emp].index[0]
                for i in range(days):
                    day = str(start_day + i)
                    if int(day) <= DAYS_IN_MONTH:
                        st.session_state.schedule_data.at[idx, day] = pattern
            log_action(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω: {selected} –¥–ª—è {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            st.success("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!")

# –£–º–Ω—ã–π –ø–æ–∏—Å–∫
def smart_search(df):
    search_term = st.sidebar.text_input("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ (–§–ò–û/–≥—Ä—É–ø–ø–∞/—Å—Ç–∞—Ç—É—Å)")
    if search_term:
        return df[df.apply(lambda row: any(
            str(search_term).lower() in str(row[col]).lower() 
            for col in ['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã', '–ì–† ‚Ññ', '–°—Ç–∞—Ç—É—Å']
        ), axis=1)]
    return df

# –û–ø–æ–≤–µ—â–µ–Ω–∏—è
def check_upcoming_events(df):
    today = datetime.now().day
    alerts = []
    for _, row in df.iterrows():
        for day in range(today, min(today+3, DAYS_IN_MONTH)):
            val = row.get(str(day), '')
            if val in STATUS_COLORS:
                alerts.append({
                    'date': day,
                    'name': row['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'],
                    'type': val
                })
    
    if alerts:
        with st.expander("üîî –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è (3 –¥–Ω—è)", expanded=True):
            for alert in alerts:
                st.warning(f"{alert['name']} - {alert['type'].upper()} {alert['date']} —á–∏—Å–ª–∞")

# –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
def show_analytics(df):
    st.header("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    col1, col2 = st.columns([1, 3])
    with col1:
        analysis_type = st.selectbox("–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞", 
            ["–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏", "–°—Ç–∞—Ç—É—Å—ã"])
        date_range = st.slider("–î–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π", 1, DAYS_IN_MONTH, (1, DAYS_IN_MONTH))
    
    with col2:
        if analysis_type == "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã":
            fig = px.bar(df, x='–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã', y='–§–∞–∫—Ç –§–†–í',
                        color='–ì–† ‚Ññ', barmode='group')
        elif analysis_type == "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏":
            fig = px.scatter(df, x='–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã', y='–æ—Ç –§–†–í',
                            size='–æ—Ç –§–†–í', color='–ì–† ‚Ññ')
        else:
            status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
            fig = px.pie(status_counts, values=status_counts.values,
                        names=status_counts.index)
        
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
    heatmap_data = df[[str(d) for d in range(date_range[0], date_range[1]+1)]].applymap(
        lambda x: 0 if x in STATUS_COLORS else float(x) if isinstance(x, (int, float)) else 0)
    fig = go.Figure(data=go.Heatmap(
        z=heatmap_data.values,
        x=heatmap_data.columns,
        y=df['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'],
        colorscale='Viridis'))
    st.plotly_chart(fig, use_container_width=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.set_page_config(layout="wide", page_title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞", page_icon="üìÖ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if 'schedule_data' not in st.session_state:
        st.session_state.schedule_data = create_schedule()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    absence_template()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
    filtered_df = smart_search(st.session_state.schedule_data)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_col = st.sidebar.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", filtered_df.columns)
    sort_order = st.sidebar.radio("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é"])
    filtered_df = filtered_df.sort_values(by=sort_col, ascending=sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    group_by = st.sidebar.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", 
        ["–ì—Ä—É–ø–ø–∞–º", "–°—Ç–∞—Ç—É—Å–∞–º", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞–º"])
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞ –ú–∏–ñ –ì–õ–§")
    check_upcoming_events(filtered_df)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.header("–¢–∞–±–µ–ª—å —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    edited_df = st.data_editor(
        filtered_df.style.apply(style_cells, axis=1),
        num_rows="dynamic",
        use_container_width=True,
        column_config={
            "–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã": st.column_config.TextColumn(required=True),
            "–ì–† ‚Ññ": st.column_config.SelectboxColumn(options=WORK_GROUPS)
        },
        key="data_editor"
    )
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    show_analytics(edited_df)
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    st.sidebar.header("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    export_format = st.sidebar.selectbox("–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", ["Excel", "CSV"])
    
    if st.sidebar.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        output = BytesIO()
        if export_format == "Excel":
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                edited_df.to_excel(writer, index=False)
            mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            file_ext = "xlsx"
        else:
            output.write(edited_df.to_csv(index=False).encode('utf-8'))
            mime_type = "text/csv"
            file_ext = "csv"
        
        st.sidebar.download_button(
            label=f"–°–∫–∞—á–∞—Ç—å {export_format}",
            data=output.getvalue(),
            file_name=f"–≥—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã_{datetime.now().strftime('%Y%m%d')}.{file_ext}",
            mime=mime_type
        )
        log_action(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {export_format}")

def create_schedule():
    employees = [
        EmployeeSchedule("–§–µ–æ–∫—Ç–∏—Å—Ç–æ–≤–∞ –ï.–ê.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û", '27': '4'}),
        EmployeeSchedule("–¢—Ä–µ—Ç—å—è–∫–æ–≤ –ê.–ò.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–ì—Ä–∞—á–µ–≤–∞ –¢.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–ë–µ–ª–æ—É—Å–æ–≤ –ê.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û"}),
        EmployeeSchedule("–î–∞–≤—ã–¥–æ–≤–∞ –°.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–°–∞—Ä–∞–Ω—Ü–µ–≤ –ê.–ù. —É—á–µ–Ω–∏–∫", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'6': "—É–≤"}),
        EmployeeSchedule("–ü–∞–Ω—Ñ–∏–ª–æ–≤ –ê.–í.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2", {'22': "–≥–æ"}),
        EmployeeSchedule("–°–≤–∏—Ä–∏–¥–æ–≤ –ê.–û. (—Å—Ç–∞–∂–µ—Ä)", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–°–º–∏—Ä–Ω–æ–≤ –ù.–ù.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–°–∏–Ω—è–∫–∏–Ω–∞ –°.–ê.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–ü–∞–Ω—Ç—é—Ö–∏–Ω –ê.–î.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2", {'23': "–≥–æ"}),
        EmployeeSchedule("–î–∞–≤—ã–¥–æ–≤–∞ –û.–ò.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–†–æ–º–µ–Ω—Å–∫–∏–π –†.–°.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–õ—É–∫–∞—à–µ–Ω–∫–æ–≤–∞ –°.–í.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3"),
        EmployeeSchedule("–†–∞–∫—É –û.–ê.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3", {'8': "–±/–ª"}),
        EmployeeSchedule("–ú–∏—Ö–µ–µ–≤–∞ –ê.–í.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3", {'15': "–ì–û"}),
        EmployeeSchedule("–ê–Ω—Ç–∏–ø–µ–Ω–∫–æ –í.–ù.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3"),
        EmployeeSchedule("–Æ–¥–∏–Ω–∞ –ò.–ï.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–õ–∏—Å–æ–≤—Å–∫–∞—è –¢.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'4': "–±/–ª"}),
        EmployeeSchedule("–ì–∞–ª–∫–∏–Ω–∞ –í.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'11': "–±/–ª"}),
        EmployeeSchedule("–ù–µ–∑–±—É–¥–µ–µ–≤ –î.–°.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–°–º–æ–ª—è–∫–æ–≤ –ê.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'12': "–ì–û"}),
        EmployeeSchedule("–î–æ–ª–≥–æ–∞—Ä—à–∏–Ω–Ω–Ω—ã—Ö –¢.–†.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–ü–æ–¥–≥–æ—Ä–±—É–Ω—Å–∫–∏–π –î.–ê.", "–æ—Ñ–∏—Å", "–û—Ñ–∏—Å")
    ]
    return pd.DataFrame([e.generate_schedule() for e in employees])

if __name__ == "__main__":
    main()