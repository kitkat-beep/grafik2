import pandas as pd
import streamlit as st
from io import BytesIO
import plotly.express as px
import plotly.graph_objects as go
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='app.log',
    format='%(asctime)s - %(message)s',
    level=logging.INFO
)

def log_action(action):
    user = st.session_state.get('user', 'unknown')
    logging.info(f"User: {user} - {action}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DAYS_IN_MONTH = 28
NORM_HOURS = 160
WORK_GROUPS = ['–ì–†1', '–ì–†2', '–ì–†3', '–ì–†4', '–æ—Ñ–∏—Å']
STATUS_CONFIG = {
    '–æ—Ç–ø—É—Å–∫': {'color': '#90EE90', 'name': '–û—Ç–ø—É—Å–∫'},
    '–±/–ª': {'color': '#FFB6C1', 'name': '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π'},
    '—É—á.–æ—Ç–ø—É—Å–∫': {'color': '#87CEEB', 'name': '–£—á–µ–±–Ω—ã–π –æ—Ç–ø—É—Å–∫'},
    '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞': {'color': '#FFFACD', 'name': '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞'}
}

class EmployeeSchedule:
    def __init__(self, name, group, schedule_type, exceptions=None, absences=None):
        self.name = name
        self.group = group
        self.schedule_type = schedule_type
        self.exceptions = exceptions or {}
        self.absences = absences or {}

    def generate_schedule(self):
        base_pattern = SCHEDULE_TEMPLATES[self.schedule_type]
        schedule = {}
        
        pattern_index = 0
        for day in range(1, DAYS_IN_MONTH+1):
            day_str = str(day)
            if day_str in self.exceptions:
                schedule[day_str] = self.exceptions[day_str]
            elif day_str in self.absences:
                schedule[day_str] = self.absences[day_str]
            else:
                schedule[day_str] = base_pattern[pattern_index % len(base_pattern)]
                pattern_index += 1
        
        total = self.calculate_total(schedule)
        
        return {
            '–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã': self.name,
            '–ì–† ‚Ññ': self.group,
            **schedule,
            '–§–∞–∫—Ç –§–†–í': round(total, 1),
            '–æ—Ç –§–†–í': round(total - NORM_HOURS, 1),
            '–°—Ç–∞—Ç—É—Å': self.get_status()
        }

    def calculate_total(self, schedule):
        return sum(
            float(h) if isinstance(h, (int, float, str)) and str(h).replace('.', '').isdigit() 
            else 0 
            for h in schedule.values()
        )

    def get_status(self):
        statuses = set()
        for day in range(1, DAYS_IN_MONTH+1):
            val = self.absences.get(str(day), '')
            if val in STATUS_CONFIG:
                statuses.add(STATUS_CONFIG[val]['name'])
        return ', '.join(statuses) if statuses else '–ê–∫—Ç–∏–≤–µ–Ω'

def create_schedule():
    employees = [
        EmployeeSchedule("–§–µ–æ–∫—Ç–∏—Å—Ç–æ–≤–∞ –ï.–ê.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û", '27': '4'}),
        # ... (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    ]
    return pd.DataFrame([e.generate_schedule() for e in employees])

def get_column_config():
    column_config = {
        "–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã": st.column_config.TextColumn(
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", required=True
        ),
        "–ì–† ‚Ññ": st.column_config.SelectboxColumn(
            "–ì—Ä—É–ø–ø–∞", options=WORK_GROUPS
        )
    }
    
    for day in range(1, DAYS_IN_MONTH+1):
        column_config[str(day)] = st.column_config.TextColumn(
            str(day),
            help="–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞",
            validate=lambda x: x in STATUS_CONFIG or x.replace('.', '').isdigit()
        )
    
    return column_config

def apply_absence_template():
    try:
        if 'schedule_data' not in st.session_state:
            st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return

        employees = st.session_state.schedule_data['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'].tolist()
        templates = {
            "–û—Ç–ø—É—Å–∫": {'code': '–æ—Ç–ø—É—Å–∫', 'days': 14},
            "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π": {'code': '–±/–ª', 'days': 7},
            "–£—á–µ–±–Ω—ã–π –æ—Ç–ø—É—Å–∫": {'code': '—É—á.–æ—Ç–ø—É—Å–∫', 'days': 5}
        }

        with st.sidebar.expander("üìÖ –®–∞–±–ª–æ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π"):
            template = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω", list(templates.keys()))
            start_day = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å", 1, DAYS_IN_MONTH, key='template_day')
            selected_employees = st.multiselect("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", employees)

            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                apply_template_to_schedule(
                    templates[template]['code'],
                    templates[template]['days'],
                    start_day,
                    selected_employees
                )
                st.success("–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        log_action(f"–û—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")

def apply_template_to_schedule(code, days, start_day, employees):
    for emp in employees:
        idx = st.session_state.schedule_data[
            st.session_state.schedule_data['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'] == emp].index[0]
        for i in range(days):
            day = str(start_day + i)
            if int(day) <= DAYS_IN_MONTH:
                st.session_state.schedule_data.at[idx, day] = code

def smart_search(df):
    try:
        search_term = st.sidebar.text_input("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ (–∏–º—è/–≥—Ä—É–ø–ø–∞/—Å—Ç–∞—Ç—É—Å)")
        if search_term:
            return df[
                df.apply(lambda row: any(
                    str(search_term).lower() in str(row[col]).lower()
                    for col in ['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã', '–ì–† ‚Ññ', '–°—Ç–∞—Ç—É—Å']
                ), axis=1)
            ]
        return df
    except:
        return df

def show_analytics(df):
    try:
        st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns([1, 3])
        with col1:
            analysis_type = st.selectbox(
                "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞", 
                ["–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏", "–°—Ç–∞—Ç—É—Å—ã"]
            )
            date_range = st.slider(
                "–î–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π", 
                1, DAYS_IN_MONTH, 
                (1, DAYS_IN_MONTH)
            )

        with col2:
            if analysis_type == "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã":
                fig = px.bar(df, x='–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã', y='–§–∞–∫—Ç –§–†–í',
                            color='–ì–† ‚Ññ', barmode='group')
            elif analysis_type == "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏":
                fig = px.scatter(df, x='–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã', y='–æ—Ç –§–†–í',
                                size='–æ—Ç –§–†–í', color='–ì–† ‚Ññ')
            else:
                status_counts = df['–°—Ç–∞—Ç—É—Å'].value_counts()
                fig = px.pie(status_counts, 
                            values=status_counts.values,
                            names=status_counts.index)
            
            st.plotly_chart(fig, use_container_width=True)

        st.subheader("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
        heatmap_data = df[[str(d) for d in range(date_range[0], date_range[1]+1)]]
        fig = go.Figure(data=go.Heatmap(
            z=heatmap_data.replace(STATUS_CONFIG.keys(), 0).astype(float).values,
            x=heatmap_data.columns,
            y=df['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'],
            colorscale='Viridis'
        ))
        st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        log_action(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        st.error("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

def main():
    st.set_page_config(
        page_title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞",
        page_icon="üìÖ",
        layout="wide"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if 'schedule_data' not in st.session_state:
        st.session_state.schedule_data = create_schedule()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    apply_absence_template()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
    filtered_df = smart_search(st.session_state.schedule_data)

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞")
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        st.header("–¢–∞–±–µ–ª—å —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        edited_df = st.data_editor(
            filtered_df,
            column_config=get_column_config(),
            num_rows="fixed",
            use_container_width=True,
            key="data_editor"
        )
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        show_analytics(edited_df)

        # –≠–∫—Å–ø–æ—Ä—Ç
        st.sidebar.header("–≠–∫—Å–ø–æ—Ä—Ç")
        if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            export_data(edited_df)

    except Exception as e:
        log_action(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        st.error("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

def export_data(df):
    try:
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False)
        
        st.sidebar.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel",
            data=output.getvalue(),
            file_name=f"–≥—Ä–∞—Ñ–∏–∫_{datetime.now().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        log_action("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    except:
        st.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()